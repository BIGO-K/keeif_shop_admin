@charset 'utf-8';

@use 'sass:math';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:selector';
@use '../helper/function';

/**
 * 헬퍼
 * 믹스인
**/


/** 플렉스 */
// 	.foo {
// 		@include flex()
// 	}
@mixin flex-container($direction: row, $wrap: nowrap) {

	display: -webkit-box;
	display: -webkit-flex;
	display: flex;

	@if $direction == column {
		-webkit-box-orient: vertical;
		@include prefix(flex-direction, $direction, webkit);
	}

	@if $wrap == wrap {
		@include prefix(flex-wrap, $wrap, webkit);
	}

}

/** 미디어 컨텐츠 */
// youtube, image 등 가로 사이즈에 맞게 유연한 높이 적용이 필요한 경우
// 부모 요소에 적용
// 	.foo {
// 		@include fluid-media(100%, 0);
// 	}
@mixin fluid-media($padding-top: 56.25%, $padding-bottom: 0) {

	overflow: hidden;
	position: relative;
	padding-top: $padding-top;
	padding-bottom: $padding-bottom;
	width: 100%;
	height: 0;
	@include font('0/1');

	> * {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}

}

/** clearfix */
//	.foo {
//		@include clearfix();
//	}
@mixin clearfix() {
	&::after {
		display: block;
		clear: both;
		content: '';
	}

}

/** prefix */
//	.foo {
//		@include prefix(transform, rotate(45deg), webkit);
//		@include prefix(transform, rotate(45deg), ('webkit', 'moz'));
//	}
@mixin prefix($property, $value, $prefixes: ()) {

	@if $property == flex {
		-webkit-box-flex: $value;
		min-width: 0;
	}
	@else if $property == flex-direction {
		@if $value == row {
			-webkit-box-orient: horizontal;
		}
		@else if $value == row-reverse {
			-webkit-box-orient: horizontal;
			-webkit-box-direction: reverse;
		}
		@else if $value == column {
			-webkit-box-orient: vertical;
		}
		@else if $value == column-reverse {
			-webkit-box-orient: vertical;
			-webkit-box-direction: reverse;
		}
	}
	@else if $property == flex-wrap {
		@if $value == wrap {
			-webkit-box-lines: multiple;
		}
		@else {
			-webkit-box-lines: single;
		}
	}
	@else if $property == align-items {
		@if $value == flex-start {
			-webkit-box-align: start;
		}
		@else if $value == flex-end {
			-webkit-box-align: end;
		}
		@else if $value == center {
			-webkit-box-align: center;
		}
		@else {
			-webkit-box-align: $value;
		}
	}
	@else if $property == justify-content {
		@if $value == flex-start {
			-webkit-box-pack: start;
		}
		@else if $value == flex-end {
			-webkit-box-pack: end;
		}
		@else if $value == center {
			-webkit-box-pack: center;
		}
		@else if $value == space-between {
			-webkit-box-align: justify;
		}
	}

	@each $prefix in $prefixes {
		-#{$prefix}-#{$property}: $value;
	}
	#{$property}: $value;

}

/** browser hack */
@mixin hack($browser) {

	@if $browser == edge {
		@at-root #{'_:-ms-lang(x)::backdrop, '} #{&} {
			@content;
		}
	}
	// @else if $browser == ie11 {
	// 	@at-root #{'_:-ms-lang(x)::-ms-backdrop, '} #{&} {
	// 		@content;
	// 	}
	// }

}

/** transform + backface-visibility */
@mixin transform($value, $origin: null, $visibility: visible) {

	@include prefix(transform, $value, webkit);
	@if $origin {
		@include prefix(transform-origin, $origin, webkit);
	}
	@if $visibility == hidden {
		@include prefix(backface-visibility, hidden, webkit);
	}

}

/** transition */
@mixin transition($args...) {

	@include prefix(transition, $args, webkit);

}

/** gradient */
@mixin linear-gradient($defaultColor, $angle, $colors...) {

	background-color: $defaultColor;
	background-image: -webkit-linear-gradient($angle, $colors);
	background-image: linear-gradient($angle, $colors);

}

/** 백그라운드 속성 분할 */
// color: transparent color # rgb rgba hsl hsla
// url: none url()
// position: center left top right bottom >> 50% 50% 변경 / length
// size: auto length % cover contain
// repeat: repeat repeat-x repeat-y no-repeat space round
// clip: border-box padding-box content-box
// origin: padding-box border-box content-box
// attachment: scroll fixed local
// 	.foo {
// 		@include mixin.background(color url 'position/size' repeat clip origin attachment);
// 	}

@function set-background-prop($prop, $key, $count, $value) {
	$stored: map.get($prop, $key);
	$length: list.length($stored);
	@return map.set($prop, $key, if($count == 1, $value, list.append(function.list-fill($stored, undefined, $length + 1, $count - $length - 1), $value)));
}

@mixin background($items...) {
	$prop: (color: undefined, image: undefined, position: undefined, size: undefined, repeat: undefined, origin: undefined, clip: undefined, attachment: undefined, blend-mode: undefined);
	$default: (color: transparent, image: none, position: meta.inspect(0 0), size: meta.inspect(auto auto), repeat: repeat, origin: padding-box, clip: border-box, attachment: scroll, blend-mode: normal);
	$count: 1;
	@each $item in $items {
		$is_clip: false;
		@each $value in $item {
			$key: null;
			@if meta.type-of($value) == color { $key: color; }
			@else if string.index($value, 'url') or string.index($value, 'gradient') or string.index($value, 'none') { $key: image; }
			@else if string.index($value, 'repeat') or list.index(space round, $value) { $key: repeat; }
			@else if string.index($value, 'box') {
				@if not $is_clip {
					$key: origin;
					$is_clip: true;
				}
				@else { $key: clip; }
			}
			@else if list.index(scroll fixed local, $value) { $key: attachment; }
			@else if string.index(meta.inspect($value), '"') == 1 {
				$numbers: function.str-split($value, '/');
				@for $i from 1 through list.length($numbers) {
					$number: list.nth($numbers, $i);
					@if $i == 1 { $key: position; }
					@else { $key: size; }

					$prop: set-background-prop($prop, $key, $count, if($number == '', undefined, $number));
				}
			}
			@else if list.index(normal multiply screen overlay darken lighten color-dodge color-burn hard-light soft-light difference exclusion hue saturation color luminosity, $value) { $key: blend-mode }

			// position, size는 split으로 내부에서 처리
			@if not list.index(position size, $key) {
				$prop: set-background-prop($prop, $key, $count, $value);
			}
		}

		$count: $count + 1;
	}

	// 속성 세팅
	@each $key in map.keys($prop) {
		$saved: map.get($prop, $key);
		@if not function.list-every($saved, undefined) {
			$saved_length: list.length($saved);
			$items_length: list.length($items);
			$joined_value: function.str-join(if($key == color, list.nth($saved, 1), if($saved_length < $items_length, function.list-fill($saved, undefined, $saved_length + 1, $items_length - $saved_length), $saved)), ', ');

			background-#{$key}: function.str-replace($joined_value, undefined, map.get($default, $key));
		}
	}
}

/** svg 이미지 */
// color: transparent color # rgb rgba hsl hsla
// url: none url()
// position: center left top right bottom >> 50% 50% 변경 / length
// size: length % auto contain cover
// repeat: repeat repeat-x repeat-y no-repeat space round
// clip: content-box padding-box border-box margin-box fill-box stroke-box view-box no-clip
// origin: content-box padding-box border-box margin-box fill-box stroke-box view-box
// 	.foo {
// 		@include mixin.svg(color url 'position/size' repeat clip origin);
// 	}
@mixin svg($values: null) {
	$is_clip: false;
	@each $value in $values {
		@if meta.type-of($value) == color {
			// @debug 'background-color:' $value;
			background-color: $value;
		}
		@else if meta.type-of($value) == string and string.index($value, 'var') {
			// css 변수
			// @debug 'background-color:' $value;
			background-color: $value;
		}
		@else if string.index($value, 'url') or string.index($value, 'none') {
			// @debug 'mask-image:' $value;
			@include prefix(mask-image, $value, webkit);
		}
		@else if string.index($value, 'repeat') or list.index(space round, $value) {
			// @debug 'mask-repeat:' $value;
			@include prefix(mask-repeat, $value, webkit);
		}
		@else if string.index($value, 'box') or list.index(no-clip, $value) {
			@if not $is_clip {
				// @debug 'mask-clip:' $value;
				@include prefix(mask-clip, $value, webkit);

				$is_clip: true;
			}
			@else {
				// @debug 'mask-origin:' $value;
				@include prefix(mask-origin, $value, webkit);
			}
		}
		@else if string.index(meta.inspect($value), '"') == 1 {
			$numbers: function.str-split(string.unquote($value), '/');
			@for $i from 1 through list.length($numbers) {
				$number: list.nth($numbers, $i);
				@if $number != '' {
					@if $i == 1 {
						// @debug 'mask-position:' $number;
						@include prefix(mask-position, $number, webkit);
					}
					@else {
						// @debug 'mask-size:' $number;
						@include prefix(mask-size, $number, webkit);
					}
				}
			}
		}
	}
}

/** 대체텍스트 */
//	.foo {
//		@include text-ir(blind);
//	}
@mixin text-ir($type: blind) {
	overflow: hidden;
	pointer-events: none;
	@if $type == blind {
		position: absolute;
		z-index: -1;
		width: 1px;
		height: 1px;
		clip-path: circle(0%);
	}
	@else if $type == size {
		position: absolute;
		top: 0;
		left: 0;
		width: 0;
		height: 0;
		@include font('0/1');
	}
	@else if $type == indent {
		// 적용 시 display: block 또는 inline-block 적용 필요
		@include font('0/1');

		text-indent: -99999px;
	}
	@else if $type == wa {
		position: relative;
		z-index: -1;
	}
}

/** 텍스트 말줄임 */
@mixin text-ellipsis($line: 1, $display: '') {
	@if $line > 0 {
		display: -webkit#{if($display == 'inline', -#{$display}, '')}-box;
		overflow: hidden;
		-webkit-box-orient: vertical;
		-webkit-line-clamp: $line;
		@if $line < 2 {
			line-height: 1.4;

			br {
				display: none;
			}
		}
	}
	@else {
		display: block;
		overflow: visible;
		-webkit-line-clamp: 0;

		br {
			display: inline;
		}
	}
}

/** 웹폰트 */
//	.foo {
//		@include font-face('fontname', font/filename);
//		@include font-face('fontname', font/filename, bold, eot woff2 woff);
//		@include font-face('fontname', font/filename, normal, eot woff2 woff ttf svg);
//		@include font-face('fontname', font/filename, normal, eot woff2 woff otf svg, italic);
//	}
@mixin font-face($name, $path, $weight: 400, $exts: woff2 woff, $style: normal) {
	// $path를 list 타입으로 적용하면 2번째 값을 파일명 뒤에 버전(.woff2?version=값)으로 추가(monticon 처럼 폰트파일이 변경될 때 사용)

	$src: null;
	$src_eot: null;
	$extmods: (
		eot: '#iefix',
		svg: '#' + function.str-replace($name, ' ', '_')
	);
	$formats: (
		eot: 'embedded-opentype',
		otf: 'opentype',
		ttf: 'truetype'
	);
	@each $ext in $exts {
		$extmod: if(map.has-key($extmods, $ext), $ext + map.get($extmods, $ext), $ext);
		$format: if(map.has-key($formats, $ext), map.get($formats, $ext), $ext);
		$url: if(meta.type-of($path) == list, list.nth($path, 1) + '.' + $extmod + '?version=' + list.nth($path, 2), $path + '.' + $extmod);
		$src: list.append($src, url(string.quote($url)) format(string.quote($format)), comma);
		@if $ext == eot {
			$src_eot: url(string.quote($path + '.' + $ext));
		}
	}
	@font-face {
		// font-variation-settings: 'wght' $weight;
		font-style: $style;
		font-weight: $weight;
		font-family: string.quote($name);
		font-display: swap;
		@if $src_eot {
			src: $src_eot;// IE9 호환성보기
		}

		src: $src;
	}
}

/** 폰트 속성 분할 */
// font-variant 속성 제외
// font-weight 속성 값은 100단위 숫자로 사용 권장(normal 400)
// 가변 폰트 사용 시 font-weight 속성 값은 v_로 시작(v_400)
// 	.foo {
// 		@include font(color weight style 'size/lineheight' [family] align decoration, whitespace letter-spacing);
// 	}
@mixin font($values: (), $options: ()) {
	@each $value in $values {
		@if meta.type-of($value) == color {
			// @debug 'color:' $value;
			color: $value;
		}
		@else if meta.type-of($value) == string and string.index($value, 'var') {// css 변수
			// @debug 'color:' $value;
			color: $value;
		}
		@else if list.index(100 200 300 400 500 600 700 800 900, $value) {
			// @debug 'font-weight:' $value;
			font-weight: $value;
		}
		@else if meta.type-of($value) == string and string.index($value, 'v_') == 1 {
			// @debug font-variation-settings: 'wght' string.slice($value, 3);
			font-variation-settings: 'wght' string.slice($value, 3);
		}
		@else if list.index(normal italic oblique, $value) {
			// @debug 'font-style:' $value;
			font-style: $value;
		}
		@else if meta.type-of($value) == list {
			// @debug 'font-family:' $value;
			font-family: list.join($value, [], $bracketed: false);
		}
		@else if string.index(meta.inspect($value), '"') == 1 {
			$sizes: function.str-split(string.unquote($value), '/');
			@for $i from 1 through list.length($sizes) {
				$size: list.nth($sizes, $i);
				@if $size != '' {
					@if $i == 1 {
						// @debug 'font-size:' $size;
						font-size: $size;
					}
					@else {
						// @debug 'line-height:' $size;
						line-height: $size;
					}
				}
			}
		}
		@else if list.index(left center right justify, $value) {
			// @debug 'text-align:' $value;
			text-align: $value;
		}
		@else if list.index(overline line-through underline none, $value) {
			// @debug 'text-decoration:' $value;
			text-decoration: $value;
		}
	}
	@each $option in $options {
		// @debug meta.type-of($option);
		@if meta.type-of($option) == number {
			// @debug 'letter-spacing:' $option;
			letter-spacing: $option;
		}
		@else {
			// @debug 'white-space:' $option;
			white-space: $option;
		}
	}
}

/** border triangle */
//	.foo {
//		@include triangle(#000, left, 3px, 6px);
//	}
@mixin triangle($color, $direction, $size-width, $size-height: $size-width) {
	width: 0;
	height: 0;
	@include font('0/1');

	border: $size-width solid transparent;
	@if $direction == bottom {
		border-top: $size-height solid $color;
		border-bottom: 0;
	}
	@else if $direction == top {
		border-top: 0;
		border-bottom: $size-height solid $color;
	}
	@else if $direction == left {
		border-right: $size-height solid $color;
		border-left: 0;
	}
	@else if $direction == right {
		border-right: 0;
		border-left: $size-height solid $color;
	}
	@else if $direction == top-left {
		border-top: $size-height solid $color;
		border-bottom: 0;
		border-left: 0;
	}
	@else if $direction == top-right {
		border-top: $size-height solid $color;
		border-right: 0;
		border-bottom: 0;
	}
	@else if $direction == bottom-left {
		border-top: 0;
		border-bottom: $size-height solid $color;
		border-left: 0;
	}
	@else if $direction == bottom-right {
		border-top: 0;
		border-right: 0;
		border-bottom: $size-height solid $color;
	}
}

/** opacity IE8 */
// png 이미지에만 적용됨 (background-color는 반투명 png이미지로 적용)
//	.foo {
//		@include opacity(0.1);
//	}
@mixin opacity($opacity, $pointer-events: null) {

	opacity: $opacity;

	// IE11부터로 제외
	// $ms-opacity: $opacity;
	// $important: str-index(inspect($ms-opacity), '!');
	// @if $important {
	//	$ms-opacity: to-number(str-replace(str-slice(inspect($ms-opacity), 1, $important - 1), ' ', ''));
	// }
	// -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$ms-opacity * 100})';

	@if $pointer-events {
		pointer-events: $pointer-events;
	}

}

/** 모션 키프레임 */
@mixin keyframes($name) {

	@-webkit-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}

}

/** 미디어쿼리 */
//	.foo {
//		width: 100%;
//		@include media(XL) {
//			width: 50%;
//	}
@mixin media($point) {

	@if $point == XXL {
		@media (min-width: 1600px) { @content; }
	}
	@else if $point == XL {
		@media (min-width: 1280px) { @content; }
	}
	@else if $point == L {
		@media (min-width: 1024px) { @content; }
	}
	@else if $point == M {
		@media (min-width: 768px) { @content; }
	}
	@else if $point == S {
		@media (min-width: 640px) { @content; }
	}
	@else if $point == XS {
		@media (min-width: 480px) { @content; }
	}
	@else if $point == XXS {
		@media (min-width: 375px) { @content; }
	}
	@else {
		@media ($point) { @content; }
	}

}

/** 요소 그룹화 */
// $selector에 &, >, + 등 사용 가능 (작성하지 않으면 기본 공백으로 적용)
//	.foo {
//		@include mixin.is('.class, div', '>') {
//			b {
//				width: 50%;
//			}
// 		}
//	}
@mixin is($context, $selector: ' ') {

	#{$selector}:is(#{$context}),
	#{$selector}:-webkit-any(#{$context}) {
		@content;
	}

}

/** 셀렉터 변경 */
// $replace-context에 띄어쓰기 사용 시 > 또는 + 필수
@mixin context-replace($target-context, $replace-context) {

	@at-root #{selector-replace(&, $target-context, $replace-context)} {
		// @debug 'replace:' $target-context $replace-context &;
		@content;
	}

}

/** 셀렉터 순서 정리(div.class::before 순으로 정리) */
@mixin context-unify($context) {

	@at-root #{selector-unify(&, $context)} {
		// @debug 'unify:' $context &;
		@content;
	}

}

/** 첫 번째 요소에 앞에 셀렉터 추가(.add.context) */
@mixin context-first($context) {

	@at-root #{selector-append($context, &)} {
		// @debug 'first:' $context &;
		@content;
	}

}

/** 선택한 요소 앞에 셀렉터 추가(.add.context, .add > .context) */
// $add-context에 띄어쓰기 사용 시 > 또는 + 필수
@mixin context-before($add-context, $target-context: null) {
	$selectors: ();
	@each $selector in & {
		$context: if($target-context, $target-context, string.slice(meta.inspect($selector), function.str-last-index(meta.inspect($selector), ' ') + 1, string.length(meta.inspect($selector))));
		$selectors: list.append($selectors, selector.replace($selector, $context, $add-context + $context), comma);

		// @debug $context;
	}

	// @debug $selectors;
	@at-root #{$selectors} {
		// @debug 'before:' $add-context $target-context &;
		@content;
	}
}

/** 선택한 요소 뒤에 셀렉터 추가(.context.add, .context > .add) */
// $add-context에 띄어쓰기 사용 시 > 또는 + 필수
@mixin context-after($add-context, $target-context: null) {
	$selectors: ();
	@each $selector in & {
		$context: if($target-context, $target-context, string.slice(meta.inspect($selector), function.str-last-index(meta.inspect($selector), ' ') + 1, string.length(meta.inspect($selector))));
		$selectors: list.append($selectors, selector.replace($selector, $context, $context + $add-context), comma);

		// @debug $context;
	}

	// @debug $selectors;
	@at-root #{$selectors} {
		// @debug 'after:' $add-context $target-context &;
		@content;
	}
}